#!/usr/bin/env python
# coding=utf8

import mimetypes
import ConfigParser
import os

from warnings import warn
from httplib import HTTPConnection, HTTPSConnection
from urlparse import urlparse

try:
	import magic # note: uses supposedly outdated version of python-magic
	# see http://stackoverflow.com/questions/43580/how-to-find-the-mime-type-of-a-file-in-python
	m = magic.open(magic.MAGIC_MIME)
	m.load()
	magic_guess = lambda x: m.file(x)
except ImportError:
	warn('python-magic not available, no content-based mimetype guessing available')
	magic_guess = lambda x: None

def guess_mimetype(path):
	mimetype = None

	# guess based on filename first - we don't want our .py files to be x-java!
	return mimetypes.guess_type(path)[0] or magic_guess(path) or None

class Uploader(object):
	def __init__(self, url, token, signature):
		self.token = token
		self.signature = signature
		self.url = urlparse(url)
		if self.url.scheme not in ('http', 'https'): Exception('Unsuppored uploader protocol %r' % protocol)

	def upload_file(self, path, mimetype = None):
		return self.upload(file(path),
		                   os.path.basename(path),
		                   mimetype or guess_mimetype(path) or 'application/octet-stream')

	def upload(self, ufile, filename = 'unnamed_file', mimetype = 'application/octet-stream'):
		if 'https' == self.url.scheme:
			warn('Secure connection request, but verification of the certificate is not implemented')
			self.connection = HTTPSConnection(self.url.netloc)
		else: self.connection = HTTPConnection(self.url.netloc)

		# connect, make first request
		self.connection.connect()

		headers = {
			'X-Dope-Protocol': 1,
			'X-Dope-Token': self.token,
			'X-Dope-Signature': self.signature,
			'User-agent': 'Dope uploader.py',
			'Content-Type': mimetype
		}
		if filename: headers['X-Dope-Filename'] = filename

		self.connection.request('POST', self.url.path, ufile, headers)
		return self.connection.getresponse()


if '__main__' == __name__:
	import sys
	configfile_path = os.path.expanduser('~/.dopeuploader')

	config = ConfigParser.RawConfigParser()
	# read config file
	if not os.path.exists(configfile_path):
		config.add_section('dope')
		config.set('dope', 'url', 'http://some.dope.host/api/token-upload')
		config.set('dope', 'token', 'put_token_here')
		config.set('dope', 'signature', 'put_signature_here')
		with open(configfile_path, 'wb') as configfile:
			config.write(configfile)
		print >>sys.stderr, "created config file at %s" % configfile_path
		sys.exit(-1)
	config.read(configfile_path)

	if 1 >= len(sys.argv):
		print >>sys.stderr, "usage: %s FILE1 FILE2..." % os.path.basename(sys.argv[0])
		sys.exit(-2)
	uploader = Uploader(config.get('dope', 'url'), config.get('dope', 'token'), config.get('dope', 'signature'))

	num_errors = 0
	for file_to_upload in sys.argv[1:]:
		print ('%s:' % file_to_upload),
		sys.stdout.flush()
		response = uploader.upload_file(file_to_upload)

		# all ok?
		if 200 == response.status:
			print response.read()
			continue

		if 403 == response.status:
			print >>sys.stderr,"bad token - check if settings in %s are correct" % configfile_path
			num_errors += 1
			continue

		print >>sys.stderr,"error, server said %r" % response.status
		num_errors += 1

	sys.exit(num_errors)
